

int VRPN_AciCommand_transport_test(void)
{
  //-----------------------------------------------------------------
  //-----------------------------------------------------------------
  // Test AciCommand transport classes.

  //-----------------------------------------------------------------
  // Test construction of server class.
  vrpn_Connection *c2 = vrpn_create_server_connection(3884);
  VRPN_AciCommand_transport_server cmd_svr("AciCommandTest", c2);
  cmd_svr.set_command_handler(&cmd_svr, handle_test_AciCommandserver_callback);

  //-----------------------------------------------------------------
  // Test construction of client class.
  AciCommand rcv_cmd;
  VRPN_AciCommand_transport_remote cmd_rmt("AciCommandTest@localhost:3884");
  cmd_rmt.register_response_handler(&rcv_cmd, handle_test_AciCommandresponse_callback);

  //-----------------------------------------------------------------
  // Wait until we're connected or fail if we time out.
  struct timeval start, now;
  vrpn_gettimeofday(&start, NULL);
  do {
    cmd_rmt.mainloop();
    cmd_svr.mainloop();
    c2->mainloop();
    vrpn_gettimeofday(&now, NULL);
  } while ( !c2->connected() && (now.tv_sec - start.tv_sec < 2) );
  if (!c2->connected()) {
    fprintf(stderr,"Timeout waiting for connection to command server\n");
    return 201;
  }

  //-----------------------------------------------------------------
  // Test encoding and decoding of all known command types
  AciCommand cmd;
  char testbuf[512];

  cmd.slot = 1;
  cmd.code = MIN_CMD_DIRECTIVE;
  cmd.rc = 2;
  rcv_cmd.slot = cmd.slot + 1;
  rcv_cmd.code = cmd.code + 1;
  rcv_cmd.rc = cmd.rc + 1;
  if ( (cmd.slot == rcv_cmd.slot) || (cmd.code == rcv_cmd.code) ||
	(cmd.rc == rcv_cmd.rc) ) {
	fprintf(stderr,"Bad initial test of directive command\n");
	return 201;
  }
  if (-1 == cmd_svr.encode_AciCommand_to(cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not encode directive command\n");
	return 202;
  }
  if (-1 == cmd_svr.decode_AciCommand_from(rcv_cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not decode directive command\n");
	return 203;
  }
  if ( (cmd.slot != rcv_cmd.slot) || (cmd.code != rcv_cmd.code) ||
	(cmd.rc != rcv_cmd.rc) ) {
	fprintf(stderr,"Bad transport of directive command\n");
	return 204;
  }

  cmd.slot = 1;
  cmd.code = MIN_CMD_VALUE;
  cmd.rc = 2;
  cmd.data.value = 3;
  rcv_cmd.slot = cmd.slot + 1;
  rcv_cmd.code = cmd.code + 1;
  rcv_cmd.rc = cmd.rc + 1;
  rcv_cmd.data.value = cmd.data.value + 1;
  if ( (cmd.slot == rcv_cmd.slot) || (cmd.code == rcv_cmd.code) ||
	(cmd.rc == rcv_cmd.rc) || (cmd.data.value == rcv_cmd.data.value) ) {
	fprintf(stderr,"Bad initial test of value command\n");
	return 205;
  }

  if (-1 == cmd_svr.encode_AciCommand_to(cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not encode value command\n");
	return 206;
  }
  if (-1 == cmd_svr.decode_AciCommand_from(rcv_cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not decode value command\n");
	return 207;
  }
  if ( (cmd.slot != rcv_cmd.slot) || (cmd.code != rcv_cmd.code) ||
	(cmd.rc != rcv_cmd.rc) || (cmd.data.value != rcv_cmd.data.value) ) {
	fprintf(stderr,"Bad transport of value command\n");
	return 208;
  }

  cmd.slot = 1;
  cmd.code = MIN_CMD_KEY;
  cmd.rc = 2;
  cmd.data.keyValue.key = 3;
  cmd.data.keyValue.value = 4;
  rcv_cmd.slot = cmd.slot + 1;
  rcv_cmd.code = cmd.code + 1;
  rcv_cmd.rc = cmd.rc + 1;
  rcv_cmd.data.keyValue.key = cmd.data.keyValue.key + 1;
  rcv_cmd.data.keyValue.value = cmd.data.keyValue.value + 1;
  if ( (cmd.slot == rcv_cmd.slot) || (cmd.code == rcv_cmd.code) ||
	(cmd.rc == rcv_cmd.rc) || 
	(cmd.data.keyValue.key == rcv_cmd.data.keyValue.key) ||
	(cmd.data.keyValue.value == rcv_cmd.data.keyValue.value) ) {
	fprintf(stderr,"Bad initial test of key-value command\n");
	return 209;
  }

  if (-1 == cmd_svr.encode_AciCommand_to(cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not encode key-value command\n");
	return 210;
  }
  if (-1 == cmd_svr.decode_AciCommand_from(rcv_cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not decode key-value command\n");
	return 211;
  }
  if ( (cmd.slot != rcv_cmd.slot) || (cmd.code != rcv_cmd.code) ||
	(cmd.rc != rcv_cmd.rc) ||
	(cmd.data.keyValue.key != rcv_cmd.data.keyValue.key) ||
	(cmd.data.keyValue.value != rcv_cmd.data.keyValue.value) ) {
	fprintf(stderr,"Bad transport of key-value command\n");
	return 212;
  }

  cmd.slot = 1;
  cmd.code = CMD_LOCK;
  cmd.rc = 2;
  cmd.data.lock.guid = 3;
  cmd.data.lock.age = 4;
  rcv_cmd.slot = cmd.slot + 1;
  rcv_cmd.code = cmd.code + 1;
  rcv_cmd.rc = cmd.rc + 1;
  rcv_cmd.data.lock.guid = cmd.data.lock.guid + 1;
  rcv_cmd.data.lock.age = cmd.data.lock.age + 1;
  if ( (cmd.slot == rcv_cmd.slot) || (cmd.code == rcv_cmd.code) ||
	(cmd.rc == rcv_cmd.rc) || 
	(cmd.data.lock.guid == rcv_cmd.data.lock.guid) ||
	(cmd.data.lock.age == rcv_cmd.data.lock.age) ) {
	fprintf(stderr,"Bad initial test of lock-value command\n");
	return 213;
  }

  if (-1 == cmd_svr.encode_AciCommand_to(cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not encode lock-value command\n");
	return 214;
  }
  if (-1 == cmd_svr.decode_AciCommand_from(rcv_cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could not decode lock-value command\n");
	return 215;
  }
  if ( (cmd.slot != rcv_cmd.slot) || (cmd.code != rcv_cmd.code) ||
	(cmd.rc != rcv_cmd.rc) ||
	(cmd.data.lock.guid != rcv_cmd.data.lock.guid) ||
	(cmd.data.lock.age != rcv_cmd.data.lock.age) ) {
	fprintf(stderr,"Bad transport of lock-value command\n");
	return 216;
  }

  //-----------------------------------------------------------------
  // Test sending a command and receiving a response
  // Make sure the response values match those requested with the rc
  // incremented by one.
  // Timeout if we don't hear back for a few seconds.
  cmd.slot = 1;
  cmd.code = MIN_CMD_DIRECTIVE;
  cmd.rc = 2;
  rcv_cmd.slot = 0;
  rcv_cmd.code = 0;
  rcv_cmd.rc = 0;
  if (!cmd_rmt.send_command(cmd)) {
    fprintf(stderr,"Could not send command\n");
    return 250;
  }
  vrpn_gettimeofday(&start, NULL);
  do {
    cmd_rmt.mainloop();
    cmd_svr.mainloop();
    c2->mainloop();
    vrpn_gettimeofday(&now, NULL);
  } while ( (rcv_cmd.rc != cmd.rc + 1) && (now.tv_sec - start.tv_sec < 2) );
  if (rcv_cmd.rc != cmd.rc + 1) {
    fprintf(stderr,"Timeout waiting for response from command\n");
    return 251;
  }
  if (rcv_cmd.slot != cmd.slot) {
    fprintf(stderr,"Bad slot from response (%d rather than %d)\n",
      rcv_cmd.slot, cmd.slot);
    return 252;
  }
  if (rcv_cmd.code != cmd.code) {
    fprintf(stderr,"Bad code from response (%d rather than %d)\n",
      rcv_cmd.code, cmd.code);
    return 253;
  }

  fprintf(stderr,"===============================================\n");
  fprintf(stderr,"Begin section where error messages are expected\n");

  //-----------------------------------------------------------------
  // Test encoding of unknown command type
  cmd.code = CMD_LOCK + 1;
  if (-1 != cmd_svr.encode_AciCommand_to(cmd, testbuf, sizeof(testbuf))) {
	fprintf(stderr,"Could (improperly) encode unknown command type\n");
	return 290;
  }

  fprintf(stderr,"End section where error messages are expected\n");
  fprintf(stderr,"===============================================\n");

  // We added one when we created the connection explictly.
  // This will delete the connection because its reference count
  // will go to zero.
  c2->removeReference();

  return 0;
}


int main(int *argc, char **argv){
  VRPN_AciCommand_transport_test();
}



